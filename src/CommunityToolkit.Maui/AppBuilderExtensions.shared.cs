using CommunityToolkit.Maui.Core;
using CommunityToolkit.Maui.Core.Handlers;
using CommunityToolkit.Maui.Views;

namespace CommunityToolkit.Maui;

/// <summary>
/// Extensions for MauiAppBuilder
/// </summary>
public static class AppBuilderExtensions
{
	/// <summary>
	/// Initializes the .NET MAUI Community Toolkit Library
	/// </summary>
	/// <param name="builder"><see cref="MauiAppBuilder"/> generated by <see cref="MauiApp"/> </param>
	/// <param name="options"><see cref="Options"/></param>
	/// <returns><see cref="MauiAppBuilder"/> initialized for <see cref="CommunityToolkit.Maui"/></returns>
	public static MauiAppBuilder UseMauiCommunityToolkit(this MauiAppBuilder builder, Action<Options>? options = default)
	{
		var toolkitOptions = new Options();
		options?.Invoke(toolkitOptions);
		builder.UseMauiCommunityToolkitCore(toolkitOptions);
		
		builder.ConfigureMauiHandlers(h =>
		{
			h.AddHandler<DrawingView, DrawingViewHandler>();
			h.AddHandler<Popup, PopupHandler>();
		});

		Popup.RemapForControls();

		return builder;
	}
}